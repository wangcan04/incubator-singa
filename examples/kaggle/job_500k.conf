name: "cifar10-convnet"
train_steps: 5000
test_steps: 200
test_freq: 200
#debug: true
#validate_steps: 100
#validate_freq: 300
gpu: 1
disp_freq: 10
seed: 0
#checkpoint_path: "examples/cifar10/checkpoint/step1000-worker0"
train_one_batch {
  alg: kBP
}
updater{
  type: kSGD
  weight_decay:0.004
  momentum:0.9
  learning_rate {
    type: kFixed
    base_lr:0.001
  }
}
neuralnet {
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "/home/dinhtta/antivirus/incubator-singa/examples/kaggle/train_data_truncated_500k_oversampled_again.bin"
      #mean_file: "examples/anh/image_mean.bin"
      batchsize: 32
      random_skip: 0
      shape: 1
      shape: 500000
      #shape: 32
    }
    include: kTrain
  }
#  layer{
#    name: "data"
#    type: kRecordInput
#    store_conf {
#      backend: "kvfile"
#      path: "examples/cifar10/val_data.bin"
#      mean_file: "examples/cifar10/image_mean.bin"
#      batchsize: 64
#      random_skip: 5000
#      shape: 3
#      shape: 32
#      shape: 32
#    }
#    include: kVal
#  }
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "/home/dinhtta/antivirus/incubator-singa/examples/kaggle/test_data_truncated_500k_oversampled_again.bin"
      #mean_file: "examples/cifar10/image_mean.bin"
      batchsize: 32
      shape: 1
      shape: 500000
      #shape: 32
    }
    include: kTest
  }

  layer {
    name: "conv1"
    #type: kCConvolution
    type: kCudnnConv
    srclayers: "data"
    convolution_conf {
      num_filters: 50
      kernel_x: 100
      kernel_y: 1
      stride_x: 25
      stride_y: 1
    }
    param {
      name: "w1"
      init {
        type:kGaussian
        #type: kGaussianSqrtFanIn
        #std: 0.01
        std:0.001
      }
    }
    param {
      name: "b1"
      lr_scale:2.0
      init {
        type: kConstant
        value:0
      }
    }
  }
  layer {
    name: "relu1"
    type: kReLU
    srclayers:"conv1"
  }
  layer {
    name: "pool1"
    #type: kCPooling
    type: kCudnnPool
    srclayers: "relu1"
    pooling_conf {
      pool: MAX
      kernel_x: 50
      kernel_y: 1
      stride_x: 25
      stride_y: 1
    }
  }
  layer {
    name: "ip1"
    type: kInnerProduct
    srclayers:"pool1"
    innerproduct_conf {
      num_output: 9
    }
    param {
      name: "w4"
      init {
        #type: kGaussianSqrtFanIn
        #std: 0.1
        type:kGaussian
        std:0.01
      }
    }
    param {
      name: "b4"
      lr_scale:2.0
      wd_scale:0
      init {
        type: kConstant
        value:0
      }
    }
  }
  layer {
   name : "softmax"
   type: kSoftmax
   srclayers: "ip1"
   include: kTest
  }

  layer {
   name : "accuracy"
   type: kAccuracy
   srclayers: "softmax"
   srclayers: "data"
   include: kTest
  }
  layer{
    name: "loss"
    type: kCudnnSoftmaxLoss
    softmaxloss_conf{
      topk:1
    }
    srclayers:"ip1"
    srclayers: "data"
  }
# uncomment "softmax", "argsort", "output" layer and comment "loss" layer
# to extract features from argsort
#  layer {
#    name : "output"
#    type: kCSVOutput
#    srclayers: "argsort"
#    store_conf {
#      path: "examples/cifar10/out.csv"
#    }
#  }
}
cluster {
  nworker_groups: 1
  nserver_groups: 1
  nworkers_per_group: 1
  nworkers_per_procs: 1
  workspace: "examples/kaggle"
}
